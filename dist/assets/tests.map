{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/contact-input/component-test.js","dummy/tests/integration/components/contact-select/component-test.js","dummy/tests/integration/components/form-list/component-test.js","dummy/tests/integration/components/list-item/component-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = Ember.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = Ember.merge;\n  var run = Ember.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/integration/components/contact-input/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('contact-input', 'Integration | Component | contact input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('class name applied', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"cOkDWufJ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"contact-input\\\",null,[[\\\"fieldName\\\"],[\\\"foo\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok(this.$('input').hasClass('foo'), 'fieldName applied as class');\n  });\n\n  (0, _emberQunit.test)('id and name computed', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"cOkDWufJ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"contact-input\\\",null,[[\\\"fieldName\\\"],[\\\"foo\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('input').attr('id'), 'cd-foo', 'id set');\n    assert.equal(this.$('input').attr('name'), 'cd-foo', 'name set');\n  });\n});","define('dummy/tests/integration/components/contact-select/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('contact-select', 'Integration | Component | contact select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('options rendered correctly', function (assert) {\n    this.set('options', [{\n      text: 'foo',\n      value: 1\n    }, {\n      text: 'bar',\n      value: 2\n    }, {\n      text: 'baz',\n      value: 3\n    }]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zH9JjFmy\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"contact-select\\\",null,[[\\\"options\\\"],[[19,0,[\\\"options\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('option').length, 3, '3 options added');\n    assert.equal(this.$('option')[0].value, 1, 'first option value correct');\n    assert.equal(this.$('option').first().text().trim(), 'foo', 'first option text correct');\n  });\n});","define('dummy/tests/integration/components/form-list/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('form-list', 'Integration | Component | form list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('checkboxes', function (assert) {\n    this.set('checkboxes', [{\n      checked: false,\n      fieldName: 'checkbox-1',\n      text: 'Option 1'\n    }, {\n      checked: true,\n      fieldName: 'checkbox-2',\n      text: 'Option 2'\n    }, {\n      checked: true,\n      fieldName: 'checkbox-3',\n      text: 'Option 3'\n    }]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Hp4W0y0+\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-list\\\",null,[[\\\"options\\\",\\\"type\\\"],[[19,0,[\\\"checkboxes\\\"]],\\\"checkbox\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('input').length, 3);\n    assert.equal(this.$('input:checked').length, 2);\n  });\n\n  (0, _emberQunit.test)('radio buttons', function (assert) {\n    this.set('radioButtons', [{\n      checked: true,\n      fieldName: 'radio-1',\n      name: 'radio-button',\n      text: 'Choice 1'\n    }, {\n      checked: false,\n      fieldName: 'radio-2',\n      name: 'radio-button',\n      text: 'Choice 2'\n    }, {\n      checked: false,\n      fieldName: 'radio-3',\n      name: 'radio-button',\n      text: 'Choice 3'\n    }]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BIL7zMew\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"form-list\\\",null,[[\\\"groupValue\\\",\\\"options\\\",\\\"type\\\"],[\\\"radio-2\\\",[19,0,[\\\"radioButtons\\\"]],\\\"radio\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('input').length, 3);\n    assert.equal(this.$('input:checked').length, 1);\n  });\n});","define('dummy/tests/integration/components/list-item/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('list-item', 'Integration | Component | list item', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('id computed', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6zTx/PjH\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"list-item\\\",null,[[\\\"fieldName\\\",\\\"type\\\"],[\\\"foo\\\",\\\"checkbox\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('input').attr('id'), 'cd-foo', 'id set');\n  });\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/contact-input/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/contact-input/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/contact-select/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/contact-select/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/form-list/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/form-list/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/list-item/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/list-item/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;","file":"tests.js"}